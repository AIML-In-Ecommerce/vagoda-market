"use client";
import {
  Affix,
  Image as AntdImage,
  Badge,
  Button,
  Descriptions,
  DescriptionsProps,
  Empty,
  Flex,
  FloatButton,
  InputNumber,
  List,
  Popover,
  Progress,
  Rate,
  Skeleton,
  Tabs,
} from "antd";
import Link from "next/link";
import { useEffect, useMemo, useState } from "react";
import ReactImageMagnify from "react-image-magnify";
import ComboList from "./ComboList";
import FloatingCartForm from "./FloatingCartForm";
import CartSummaryModal from "./ProductSummaryModal";
import ReviewList from "./ReviewList";

export default function ProductDetail() {
  const productInfo = {
    _id: "string",
    name: "√Åo Polo Nam Pique Cotton USA",
    // attribute: {
    //   ....
    // }
    description: "string",
    originalPrice: 8900000,
    finalPrice: 4900000,
    category: "string",
    shopId: "string",
    // status: ENUM[AVAILABLE, SOLD_OUT, SALE];
    images: [
      "https://cdn.shopify.com/s/files/1/0023/1342/0889/products/ClassicShirt_White_1_5cd5bf10-af18-4d0b-a477-bc3422d8401a.jpg?v=1688497040",
      // "https://dictionary.cambridge.org/images/thumb/shirt_noun_002_33400.jpg?version=6.0.11",
      "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",
      "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/1ea7ed04-5964-4ad8-a224-b884d15fb60c/sportswear-oversized-t-shirt-ptNVST.png",

      // "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",
      // "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",

      // "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",
      // "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",
      // "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",
      // "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",
      // "https://www.aristobrat.in/cdn/shop/files/ClassicShirt_White_1.jpg?v=1709556583&width=2048",
    ],
    avgRating: 4.9,
    createdAt: "string",
  };

  // replace this with html component from seller page
  const items: DescriptionsProps["items"] = [
    // key can be index, label is title, children is content
    // TODO: make span configurable?
    {
      key: "1",
      label: "Product",
      children: "√Åo Polo Nam Pique Cotton USA",
    },
    {
      key: "2",
      label: "Usage Time",
      children: "2019-04-24 18:00:00",
      span: 2,
    },
    {
      key: "3",
      label: "Status",
      children: <Badge status="processing" text="Available" />,
    },
    {
      key: "4",
      label: "Negotiated Amount",
      children: "$80.00",
    },
    {
      key: "5",
      label: "Discount",
      children: "$20.00",
    },
    {
      key: "6",
      label: "Config Info",
      children: (
        <>
          Data disk type: MongoDB
          <br />
          Database version: 3.4
          <br />
          Package: dds.mongo.mid
          <br />
          Storage space: 10 GB
          <br />
          Replication factor: 3
          <br />
          Region: East China 1
          <br />
        </>
      ),
      span: 3,
    },
  ];

  // images
  type ImageInfoType = {
    width: number;
    height: number;
  };

  const [mainImage, setMainImage] = useState(productInfo.images[0]);
  const [mainImageInfo, setMainImageInfo] = useState<ImageInfoType>({
    width: 0,
    height: 0,
  });

  useEffect(() => {
    function getMeta(url: string, callback: any) {
      const img = new Image();
      img.src = url;
      img.onload = function () {
        callback(img.width, img.height);
      };
    }
    getMeta(mainImage, (width: number, height: number) => {
      // alert(width + "px " + height + "px");
      let imageInfo = { width, height };
      setMainImageInfo(imageInfo);
    });
  }, [mainImage]);

  const [numberOfReview, setNumberOfReview] = useState(0);

  const [numberOfItem, setNumberOfItem] = useState(1);

  const [totalComboPrice, setTotalComboPrice] = useState(0);

  const [comboIdList, setComboIdList] = useState<Array<string>>([]);

  const totalPrice = useMemo(() => {
    return numberOfItem * productInfo.finalPrice + totalComboPrice;
  }, [totalComboPrice, numberOfItem]);

  const imageCol = useMemo(() => {
    return productInfo.images.length > 5 ? 2 : 1;
  }, []);

  const [width, setWidth] = useState(window.innerWidth);
  const updateDimensions = () => {
    setWidth(window.innerWidth);
  };
  useEffect(() => {
    window.addEventListener("resize", updateDimensions);
    return () => window.removeEventListener("resize", updateDimensions);
  }, []);

  // modal
  const [open, setOpen] = useState(false);

  // review summary
  const reviewSummary = (
    <div className="sticky bg-white rounded-xl mt-2 border-2 top-0 p-3 flex flex-col md:flex-row lg:flex-col items-center">
      <div id="star-review-summary">
        <Popover
          title="Th·ªëng k√™ chung"
          content={
            <div>
              <Flex vertical gap="small" style={{ width: 300 }}>
                <Flex gap="small">
                  <Rate
                    disabled
                    defaultValue={5}
                    style={{ padding: 5, fontSize: 10 }}
                  />
                  <Flex gap="small" style={{ width: 180 }}>
                    <Progress percent={66} size="small" />
                  </Flex>
                </Flex>
                <Flex gap="small">
                  <Rate
                    disabled
                    defaultValue={4}
                    style={{ padding: 5, fontSize: 10 }}
                  />
                  <Flex gap="small" style={{ width: 180 }}>
                    <Progress percent={33} size="small" />
                  </Flex>
                </Flex>
                <Flex gap="small">
                  <Rate
                    disabled
                    defaultValue={3}
                    style={{ padding: 5, fontSize: 10 }}
                  />
                  <Flex gap="small" style={{ width: 180 }}>
                    <Progress percent={1} size="small" />
                  </Flex>
                </Flex>
                <Flex gap="small">
                  <Rate
                    disabled
                    defaultValue={2}
                    style={{ padding: 5, fontSize: 10 }}
                  />
                  <Flex gap="small" style={{ width: 180 }}>
                    <Progress percent={0} size="small" />
                  </Flex>
                </Flex>
                <Flex gap="small">
                  <Rate
                    disabled
                    defaultValue={1}
                    style={{ padding: 5, fontSize: 10 }}
                  />
                  <Flex gap="small" style={{ width: 180 }}>
                    <Progress percent={0} size="small" />
                  </Flex>
                </Flex>
              </Flex>
            </div>
          }
        >
          <div className="flex flex-col cursor-pointer items-center gap-2 w-max">
            <div className="font-bold uppercase text-sm md:text-sm">
              ƒë√°nh gi√° s·∫£n ph·∫©m
            </div>
            <div className="font-extrabold uppercase text-2xl md:text-6xl">
              4.5
            </div>
            <Rate
              disabled
              allowHalf
              defaultValue={4.5}
              style={{ padding: 5, fontSize: 28 }}
            />
            <div className="italic pb-5 text-[9px] md:text-sm">
              {numberOfReview} ƒë√°nh gi√°
            </div>
          </div>
        </Popover>
      </div>

      <div id="ai-review-summary" className="mb-5 md:pl-5 lg:pl-0">
        <div className="font-bold md:pt-5 text-sm md:text-lg">
          TechZone Assistant ü§ñ
        </div>

        <div className="font-semibold pt-5 text-xs md:text-sm">
          T·ªïng quan ƒë√°nh gi√° kh√°ch h√†ng:
        </div>
        <div className="pt-2 text-xs md:text-sm">
          T·ªïng th·ªÉ, iRobot Roomba 980 l√† m·ªôt s·ª± l·ª±a ch·ªçn t·ªët cho ng∆∞·ªùi ti√™u d√πng
          mu·ªën ƒë·∫ßu t∆∞ v√†o m·ªôt robot h√∫t b·ª•i th√¥ng minh v√† hi·ªáu qu·∫£. V·ªõi hi·ªáu
          su·∫•t h√∫t b·ª•i m·∫°nh m·∫Ω, t√≠nh nƒÉng th√¥ng minh v√† kh·∫£ nƒÉng v·∫≠n h√†nh linh
          ho·∫°t, Roomba 980 s·∫Ω gi√∫p gi·∫£m b·ªõt c√¥ng vi·ªác lau ch√πi v√† mang l·∫°i m·ªôt
          kh√¥ng gian s·ªëng s·∫°ch s·∫Ω h∆°n.
        </div>
      </div>
    </div>
  );

  // review summary visibility
  const [reviewSummaryVisibility, setReviewSummaryVisibility] = useState(true);

  // ATTEMPT 1
  // Get the navbar
  // const bottom = document.getElementById("page-bottom-boundary");

  // Get the offset position of the navbar

  // Add the sticky class to the navbar when you reach its scroll position. Remove the sticky class when you leave the scroll position.
  // useEffect(() => {
  //   const sticky = bottom ? bottom.offsetTop : window.scrollY;

  //   if (bottom) {
  //     if (window.scrollY >= sticky) {
  //       setReviewSummaryVisibility(false);
  //     } else {
  //       setReviewSummaryVisibility(true);
  //     }

  //     console.log("bottom ", bottom.offsetTop);
  //   } else console.log("bottom is null");
  // }, [bottom]);

  // ATTEMPT 2
  //   function getDocHeight() {
  //     var D = document;
  //     return Math.max(
  //         D.body.scrollHeight, D.documentElement.scrollHeight,
  //         D.body.offsetHeight, D.documentElement.offsetHeight,
  //         D.body.clientHeight, D.documentElement.clientHeight
  //     );
  // }
  //   window.scroll(function() {
  //     if(window.innerHeight && window.screenTop + window.innerHeight == getDocHeight()) {
  //         alert("bottom!");
  //     }
  //  });

  // all reviews
  const allReviews = <ReviewList setNumberOfReview={setNumberOfReview} />;

  // tabs, descriptions and review summary
  const tabItems = [
    {
      // label: `Descriptions`,
      label: "M√¥ t·∫£",
      key: "1",
      children: (
        <div className="p-2">
          <b>T·ªïng Quan: </b>
          Robot h√∫t b·ª•i ƒë√£ tr·ªü th√†nh m·ªôt ph·∫ßn kh√¥ng th·ªÉ thi·∫øu trong cu·ªôc s·ªëng
          hi·ªán ƒë·∫°i, v√† iRobot Roomba 980 l√† m·ªôt trong nh·ªØng s·ª± l·ª±a ch·ªçn h√†ng ƒë·∫ßu
          trong th·ªã tr∆∞·ªùng n√†y. V·ªõi nhi·ªÅu t√≠nh nƒÉng th√¥ng minh v√† hi·ªáu su·∫•t t·ªët,
          Roomba 980 h·ª©a h·∫πn mang l·∫°i s·ª± thu·∫≠n ti·ªán v√† s·∫°ch s·∫Ω cho gia ƒë√¨nh c·ªßa
          b·∫°n.
          <br />
          <b>Hi·ªáu Su·∫•t H√∫t B·ª•i: </b>
          Roomba 980 c√≥ m·ªôt h·ªá th·ªëng h√∫t b·ª•i m·∫°nh m·∫Ω v·ªõi c√¥ng ngh·ªá h√∫t
          AeroForce, gi√∫p l√†m s·∫°ch hi·ªáu qu·∫£ c·∫£ tr√™n c√°c b·ªÅ m·∫∑t c·ª©ng v√† th·∫£m. B·ªô
          c·∫£m bi·∫øn th√¥ng minh gi√∫p robot nh·∫≠n bi·∫øt c√°c khu v·ª±c b·∫©n v√† tƒÉng c∆∞·ªùng
          h√∫t ·ªü nh·ªØng v√πng ƒë√≥.
          <br />
          <b>T√≠nh NƒÉng Th√¥ng Minh: </b>
          V·ªõi t√≠nh nƒÉng ƒëi·ªÅu khi·ªÉn t·ª´ xa th√¥ng qua ·ª©ng d·ª•ng di ƒë·ªông, Roomba 980
          cho ph√©p b·∫°n ki·ªÉm so√°t v√† l·∫≠p l·ªãch tr√¨nh h√∫t b·ª•i m·ªôt c√°ch linh ho·∫°t.
          H·ªá th·ªëng ƒëi·ªÅu h∆∞·ªõng iAdapt 2.0 c√πng v·ªõi c√°c c·∫£m bi·∫øn gi√∫p robot tr√°nh
          va ch·∫°m v√† ƒëi·ªÅu h∆∞·ªõng th√¥ng minh trong kh√¥ng gian, tr√°nh c√°c v·∫≠t c·∫£n
          v√† l√™n c√°c b·ªÅ m·∫∑t kh√°c nhau m·ªôt c√°ch d·ªÖ d√†ng.
          <br />
          <b>Th·ªùi L∆∞·ª£ng Pin: </b>
          M·ªôt ƒëi·ªÉm y·∫øu nh·ªè c·ªßa Roomba 980 l√† th·ªùi l∆∞·ª£ng pin kh√¥ng ƒë∆∞·ª£c d√†i l√¢u
          nh∆∞ mong ƒë·ª£i. Trong ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng th√¥ng th∆∞·ªùng, pin c√≥ th·ªÉ ƒë·ªß cho
          vi·ªác h√∫t b·ª•i trong kho·∫£ng 1-2 gi·ªù, t√πy thu·ªôc v√†o c·∫•p ƒë·ªô s·∫°ch s·∫Ω c·ªßa
          kh√¥ng gian.
          <br />
          <b>D·ªÖ D√†ng V·ªá Sinh: </b>
          Vi·ªác v·ªá sinh v√† b·∫£o d∆∞·ª°ng Roomba 980 c≈©ng kh√° ƒë∆°n gi·∫£n. B·ªô l·ªçc v√†
          th√πng ch·ª©a b·ª•i d·ªÖ d√†ng th√°o r·ªùi v√† l√†m s·∫°ch. B·∫°n ch·ªâ c·∫ßn th∆∞·ªùng xuy√™n
          l√†m s·∫°ch c√°c ph·∫ßn n√†y ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu su·∫•t h√∫t b·ª•i t·ªët nh·∫•t.
        </div>
      ),
    },
    {
      // label: `Specifications`,
      label: "ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t",
      key: "2",
      children: <Descriptions bordered items={items} />,
    },
    {
      // label: `Review Summary`,
      label: `T·ªïng quan ƒë√°nh gi√°`,
      key: "3",
      children: (
        <div>
          <div className="lg:grid lg:grid-cols-3 gap-5 h-fit">
            <div className="lg:col-span-1">
              <Affix
                offsetTop={60}
                className={`${reviewSummaryVisibility ? "" : "invisible"} `}
              >
                {reviewSummary}
              </Affix>
            </div>
            <div className="lg:col-span-2">{allReviews}</div>
          </div>
          <div
            id="page-bottom-boundary"
            style={{ border: "1px solid white" }}
            //wip
            // ref={ref}
          />
        </div>
      ),
    },
  ];

  return (
    <div className="justify-between mx-10 lg:px-10 pb-10 gap-5 h-fit overflow-hidden relative">
      <div className="">
        {/* about product */}
        <div className="bg-white flex lg:flex-row flex-col my-5 lg:max-h-[450px] xl:max-h-[550px] overflow-y-clip">
          <Flex>
            <div
              className={`m-2 flex flex-col min-w-14 ${
                imageCol == 1 ? "max-w-14" : "max-w-28"
              }`}
            >
              <List
                grid={{ gutter: 20, column: imageCol }}
                dataSource={productInfo.images}
                locale={{
                  emptyText: (
                    <Empty
                      image={Empty.PRESENTED_IMAGE_SIMPLE}
                      description={<span>Kh√¥ng c√≥</span>}
                    />
                  ),
                }}
                renderItem={(item) => (
                  <List.Item>
                    <div
                      className={`cursor-pointer ${
                        mainImage == item
                          ? "border-4 border-blue-400"
                          : "border-2"
                      }`}
                      onClick={() => {
                        setMainImage(item);
                      }}
                    >
                      <img
                        className="h-12 w-12 object-fill"
                        src={item}
                        // alt={item}
                      />
                    </div>
                  </List.Item>
                )}
              />
            </div>

            <div className="bg-white h-fit z-50">
              <AntdImage
                width={20}
                src="https://cdn.icon-icons.com/icons2/1372/PNG/512/resize-3_91066.png"
                preview={{
                  src: mainImage,
                }}
                className="absolute top-2 left-2 z-50 cursor-pointer border-2 border-white mb-5"
              />

              {/* alt option */}
              {/* <AntdImage
                width={500}
                src={mainImage}
                preview={{
                  src: mainImage,
                }}
                className="border-2 border-white"
              /> */}

              <ReactImageMagnify
                {...{
                  smallImage: {
                    alt: productInfo.name,
                    isFluidWidth: true,
                    width: 500,
                    height: 500,
                    src: mainImage,
                    // src: mainImage + "?width=500&height=500",
                  },
                  largeImage: {
                    src: mainImage,
                    // width: mainImageInfo.width * 0.8,
                    // height: mainImageInfo.height * 0.8,
                    width: mainImageInfo.width,
                    height: mainImageInfo.height,
                  },
                  enlargedImageContainerDimensions: {
                    // width: "160%",
                    // height: "120%",
                    // width: width > 1000 ? "180%" : "350%",
                    width: "180%",
                    height: "100%",
                  },
                  // isHintEnabled: true,
                  // hintTextMouse: "Tr·ªè ƒë·ªÉ ph√≥ng to ho·∫∑c nh·∫•n v√†o k√≠nh l√∫p",
                  shouldHideHintAfterFirstActivation: false,
                  // imageClassName: "h-[500px] w-[500px] object-fill",
                }}
              />
            </div>
          </Flex>

          {/* desc */}
          <div className="p-4 ml-5 md:w-[700px] lg:min-w-[400px] xl:min-w-[600px] xl:min-w-4/7 overflow-hidden grid grid-rows-5 xl:grid-rows-6">
            {productInfo._id == null && <Skeleton active />}

            {/* name block */}
            <div className="row-start-1 flex flex-col gap-2">
              <div className="font-bold text-xl lg:text-2xl xl:text-3xl truncate">
                {productInfo.name}
              </div>

              <div className="text-xs">
                Th∆∞∆°ng hi·ªáu / Shop:{" "}
                <Link href="" className="text-blue-500">
                  Ecovacs
                </Link>
              </div>
            </div>

            {/* rating block */}
            <Flex
              gap="small"
              style={{ alignContent: "center" }}
              className="row-start-2 flex items-center"
            >
              <Rate
                disabled
                allowHalf
                defaultValue={4.5}
                style={{ padding: 5, fontSize: 30 }}
              />
              <div className="font-bold uppercase text-2xl xl:text-3xl">
                {productInfo.avgRating}
              </div>
              {/* <div className="text-xs font-light mt-2">
                ({numberOfReview} ƒë√°nh gi√°)
              </div>
              <Divider
                type="vertical"
                style={{ height: "auto", border: "0.25px solid silver" }}
              />
              <div className="mt-1 text-sm font-light">ƒê√£ b√°n 5000+</div> */}
            </Flex>

            {/* price block */}
            <div className="row-start-3 flex flex-col justify-center">
              <div className="line-through text-slate-300 uppercase text-sm md:text-lg xl:text-xl">
                {priceIndex(productInfo.originalPrice)}
              </div>
              <div className="flex flex-row gap-3">
                <div className="font-bold text-red-500 uppercase text-xl md:text-2xl xl:text-4xl">
                  {priceIndex(productInfo.finalPrice)}
                </div>
                <div className="text-red-500 uppercase text-xs mt-1">-50%</div>
              </div>
            </div>

            <div className="row-start-4 xl:row-span-2 h-1/2 items-center grid grid-cols-4 text-sm xl:text-lg">
              <div className="col-span-1 col-start-1 font-bold pt-3">
                T√¨nh tr·∫°ng:{" "}
              </div>
              <div className="col-span-1 col-start-2 pt-3">C√≤n h√†ng</div>
              <div className="col-span-1 col-start-1 font-bold pt-3">
                S·ªë l∆∞·ª£ng:{" "}
              </div>
              <div className="col-span-1 col-start-2 pt-3">124332</div>
            </div>

            {/* buttons block  */}
            <div className="row-start-5 xl:row-start-6 items-center flex">
              {/* temp */}
              <InputNumber size="large" />
              {/* <Button block size="large">
                Th√™m v√†o gi·ªè h√†ng
              </Button> */}
              <Button type="primary" href="/cart" danger block size="large">
                Mua ngay
              </Button>
            </div>
          </div>
        </div>

        <Affix offsetTop={0}>
          <FloatingCartForm
            handleCartDetail={setOpen}
            numberOfItem={numberOfItem}
            updateItemNumber={setNumberOfItem}
            totalPrice={totalPrice}
            product={{
              name: productInfo.name,
              price: productInfo.finalPrice,
              mainImage: productInfo.images[0],
            }}
          />
        </Affix>

        {/* related products to buy with  */}
        <div className="font-semibold px-5 mt-5 text-sm">
          S·∫£n ph·∫©m c√≥ th·ªÉ k·∫øt h·ª£p
        </div>

        <ComboList
          totalPrice={totalPrice}
          totalComboPrice={totalComboPrice}
          updateTotalComboPrice={(price) => {
            setTotalComboPrice(price);
          }}
          comboIdList={comboIdList}
          setComboIdList={setComboIdList}
        />

        {/* tabs, descriptions and review summary */}
        <div className="my-5">
          <Tabs
            defaultActiveKey="1"
            type="card"
            items={tabItems.map((item, i) => {
              //   const id = String(i + 1);
              return {
                label: item.label,
                key: item.key,
                children: item.children,
              };
            })}
            className="overflow-y-hidden"
          />
        </div>
      </div>

      {/* others */}
      <FloatButton.Group>
        <FloatButton.BackTop tooltip={<div>L∆∞·ªõt l√™n ƒë·∫ßu</div>} />
      </FloatButton.Group>

      <CartSummaryModal
        open={open}
        setOpen={setOpen}
        totalPrice={totalPrice}
        mainProductId={productInfo._id}
        mainProductPrice={productInfo.finalPrice}
        numberOfItem={numberOfItem}
        comboIdList={comboIdList}
        totalComboPrice={totalComboPrice}
      />
    </div>
  );
}

// price
export const priceIndex = (price: number) => {
  return price.toLocaleString("vi-VN", {
    style: "currency",
    currency: "VND",
    minimumFractionDigits: 0,
  });
};
